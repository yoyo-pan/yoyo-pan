{"version":3,"sources":["App.tsx","logo.svg","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["deferredPrompt","iAm","URLSearchParams","window","location","search","get","channel","BroadcastChannel","App","useState","showPrompt","togglePrompt","msg","setMsg","useEffect","addEventListener","e","preventDefault","console","log","onmessage","event","data","onTalk","to","navigator","serviceWorker","controller","postMessage","type","payload","from","className","src","logo","alt","onClick","prompt","userChoice","then","choiceResult","outcome","style","color","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4e08298f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n// Initialize deferredPrompt for use later to show browser install prompt.\nlet deferredPrompt: any;\nconst iAm = new URLSearchParams(window.location.search).get(\"name\");\nconst channel = new BroadcastChannel(\"app-data\");\n\nfunction App() {\n  const [showPrompt, togglePrompt] = useState(false);\n  const [msg, setMsg] = useState(\"Nobody talk to me\");\n\n  useEffect(() => {\n    window.addEventListener(\"beforeinstallprompt\", (e: any) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      deferredPrompt = e;\n      // Update UI notify the user they can install the PWA\n      togglePrompt(true);\n      // Optionally, send analytics event that PWA install promo was shown.\n      console.log(`'beforeinstallprompt' event was fired.`);\n    });\n\n    channel.onmessage = (event) => {\n      setMsg(`Page ${event.data} talk to me`);\n    };\n  }, []);\n\n  const onClick = () => {\n    togglePrompt(false);\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then((choiceResult: any) => {\n      if (choiceResult.outcome === \"accepted\") {\n        console.log(\"User accepted the install prompt\");\n      } else {\n        console.log(\"User dismissed the install prompt\");\n      }\n    });\n  };\n\n  const onTalk = (to: string) => {\n    window.navigator?.serviceWorker?.controller?.postMessage({\n      type: `TALK_TO_${to}`,\n      payload: {\n        from: iAm,\n      },\n    });\n    channel.postMessage(iAm);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button onClick={onClick}>Install PWA</button>\n        {showPrompt && <div>Install!!!</div>}\n        <div style={{ color: \"#FFFFFF\" }}>I am page {iAm}</div>\n        <div>\n          <button onClick={() => onTalk(\"A\")}>Talk to page a</button>\n          <button onClick={() => onTalk(\"B\")}>Talk to page b</button>\n          <button onClick={() => onTalk(\"C\")}>Talk to page c</button>\n        </div>\n        <div>{msg}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}