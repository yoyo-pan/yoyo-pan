{"version":3,"sources":["DicomImporter/styles.ts","DicomImporter/components/Dropzone.tsx","DicomImporter/components/CircularProgressWithLabel.tsx","DicomImporter/DicomImporter.tsx"],"names":["useUploaderStyles","makeStyles","root","background","boxSizing","header","fontSize","color","height","patientId","marginTop","dropzone","width","display","justifyContent","alignItems","borderRadius","rows","overflowY","row","margin","padding","dialogError","useProgressStyles","Dropzone","props","onDropFiles","disabled","classes","onDrop","useCallback","acceptedFiles","a","length","files","sort","b","name","useDropzone","multiple","accept","getRootProps","getInputProps","isDragActive","Box","className","CircularProgressWithLabel","position","CircularProgress","variant","top","left","bottom","right","Typography","component","style","Math","round","value","DicomImporter","useState","URLSearchParams","window","location","search","get","setPatientId","dialogMsg","setDialogMsg","fileStatusList","setFileStatusList","progress","setProgress","isProcessing","setIsProcessing","hasError","setHasError","updateProgress","progressEvent","percentCompleted","loaded","total","uploadPreProcess","statusList","map","filename","status","axios","method","url","API_URL","headers","err","uploadFiles","i","prev","newFiles","formData","FormData","append","data","onUploadProgress","message","uploadFinished","onStart","console","error","p","TextField","label","onChange","event","target","f","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","id","DialogActions","Button","onClick"],"mappings":"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","file":"static/js/9.b0edcf0c.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core'\n\nexport const useUploaderStyles = makeStyles({\n  root: {\n    background: 'rgb(48, 63, 71)',\n    boxSizing: 'border-box',\n  },\n  header: {\n    fontSize: '40px',\n    color: '#FFFFFF',\n    height: '100px',\n  },\n  patientId: {\n    color: '#FFFFFF',\n    '& label': {\n      fontSize: '24px !important',\n      color: '#FFFFFF !important',\n    },\n    '& input': {\n      marginTop: '8px',\n      color: '#FFFFFF !important',\n      fontSize: '36px !important',\n    },\n  },\n  dropzone: {\n    background: 'rgba(44, 50, 53, 1)',\n    height: '200px',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#6EC4D0',\n    borderRadius: '16px',\n    '&.active': {\n      background: 'rgba(44, 50, 53, 0.5)',\n    },\n  },\n  rows: {\n    height: 'calc(100vh - 400px)',\n    overflowY: 'auto',\n  },\n  row: {\n    color: '#FFFFFF',\n    fontSize: '18px',\n    width: '80%',\n    borderRadius: '5px',\n    margin: '8px',\n    padding: '8px',\n    '&.bg': {\n      background: '#3B7B9C',\n    },\n  },\n  dialogError: {\n    color: 'red',\n  },\n})\n\nexport const useProgressStyles = makeStyles({\n  root: {\n    color: '#6EC4D0',\n    '&.MuiTypography-caption': {\n      color: '#FFFFFF !important',\n    },\n  },\n})\n","import { Box } from '@material-ui/core'\n\nimport { useUploaderStyles } from '../styles'\nimport { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\ninterface Props {\n  disabled: boolean\n  onDropFiles: (files: File[]) => void\n}\n\nexport default function Dropzone(props: Props) {\n  const { onDropFiles, disabled } = props\n  const classes = useUploaderStyles()\n\n  const onDrop = useCallback(\n    // NOTE: Drop folder will miss file type \"application/type\"\n    async (acceptedFiles: File[]) => {\n      if (acceptedFiles.length === 0) {\n        return\n      }\n\n      const files = acceptedFiles.sort((a, b) => {\n        if (a.name > b.name) return 1\n        return a.name < b.name ? -1 : 0\n      })\n\n      onDropFiles(files)\n    },\n    [onDropFiles]\n  )\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    disabled,\n    multiple: true,\n    accept: ['.dcm', '.DCM'],\n  })\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\">\n      <div {...getRootProps()} className={`${classes.dropzone} ${isDragActive ? 'active' : ''}`}>\n        <input {...getInputProps()} />\n        <p>\n          {isDragActive\n            ? 'Drop the files here ...'\n            : disabled\n            ? 'Files processing, please wait for the current process finish'\n            : 'Drag some files here, or click to select files'}\n        </p>\n      </div>\n    </Box>\n  )\n}\n","import { CircularProgressProps, Box, CircularProgress, Typography } from '@material-ui/core'\nimport { useProgressStyles } from 'DicomImporter/styles'\n\nexport default function CircularProgressWithLabel(\n  props: CircularProgressProps & { value: number }\n) {\n  const classes = useProgressStyles()\n\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress variant=\"determinate\" {...props} classes={{ root: classes.root }} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"caption\" component=\"div\" style={{ color: '#FFFFFF' }}>{`${Math.round(\n          props.value\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  )\n}\n","import {\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  TextField,\n} from '@material-ui/core'\nimport { useCallback, useState } from 'react'\nimport { useUploaderStyles } from './styles'\nimport Dropzone from './components/Dropzone'\nimport CircularProgressWithLabel from './components/CircularProgressWithLabel'\nimport axios from 'axios'\nimport { API_URL } from 'common/utils'\n\nexport default function DicomImporter() {\n  const classes = useUploaderStyles()\n  const [patientId, setPatientId] = useState(\n    new URLSearchParams(window.location.search).get('patient_id')\n  )\n  const [dialogMsg, setDialogMsg] = useState<string | null>(null)\n  const [fileStatusList, setFileStatusList] = useState<{ filename: string; status: string }[]>([])\n  const [progress, setProgress] = useState(0)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const [hasError, setHasError] = useState(false)\n\n  const updateProgress = useCallback((progressEvent) => {\n    const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n    setProgress(percentCompleted)\n  }, [])\n\n  const uploadPreProcess = useCallback(\n    (files: File[]) => {\n      const statusList = files.map((a: File) => ({\n        filename: a.name,\n        status: 'pending',\n      }))\n      setFileStatusList(statusList)\n      setIsProcessing(true)\n      setHasError(false)\n\n      try {\n        axios({\n          method: 'post',\n          url: `${API_URL}/importer/${patientId}/start`,\n          headers: { 'Content-Type': 'application/json' },\n        })\n      } catch (err) {\n        setDialogMsg('Failed to start the upload process, please try again.')\n        throw err\n      }\n      return\n    },\n    [patientId]\n  )\n\n  const uploadFiles = useCallback(\n    async (acceptedFiles: File[]) => {\n      for (let i = 0; i < acceptedFiles.length; i++) {\n        setFileStatusList((prev) => {\n          const newFiles = [...prev]\n          if (i > 0) {\n            newFiles[i - 1].status = 'completed'\n          }\n          newFiles[i].status = 'uploading'\n          return newFiles\n        })\n\n        const formData = new FormData()\n        formData.append('dicom', acceptedFiles[i])\n\n        try {\n          await axios({\n            method: 'post',\n            url: `${API_URL}/importer/${patientId}/dicom`,\n            data: formData,\n            headers: { 'Content-Type': 'multipart/form-data' },\n            onUploadProgress: updateProgress,\n          })\n        } catch (err) {\n          setDialogMsg(`Upload file ${acceptedFiles[i].name} failed. ${err.message}`)\n          // axios will update the progress to 100 when error occurred\n          // we need to reset it to avoid misunderstanding\n          setProgress(0)\n          throw err\n        }\n      }\n\n      setFileStatusList((prev) => {\n        const newFiles = [...prev]\n        newFiles[prev.length - 1].status = 'completed'\n        return newFiles\n      })\n    },\n    [updateProgress, patientId]\n  )\n\n  const uploadFinished = useCallback(async () => {\n    try {\n      await axios({\n        method: 'post',\n        url: `${API_URL}/importer/${patientId}/end`,\n        headers: { 'Content-Type': 'application/json' },\n      })\n    } catch (err) {\n      setDialogMsg('Unfortunately, the upload process ended with error, please try again.')\n      throw err\n    }\n    setIsProcessing(false)\n    setDialogMsg('You have uploaded all the files.')\n  }, [patientId])\n\n  const onStart = useCallback(\n    async (files: File[]) => {\n      try {\n        await uploadPreProcess(files)\n        await uploadFiles(files)\n        await uploadFinished()\n      } catch (err) {\n        setHasError(true)\n        console.error(err)\n      }\n\n      setIsProcessing(false)\n    },\n    [uploadPreProcess, uploadFiles, uploadFinished]\n  )\n\n  return (\n    <Box height=\"100vh\" p=\"40px\" className={classes.root}>\n      <header className={classes.header}>\n        <TextField\n          label=\"Patient\"\n          value={patientId}\n          classes={{ root: classes.patientId }}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n            setPatientId(event.target.value)\n          }\n          error={!patientId}\n        />\n      </header>\n      <Dropzone onDropFiles={onStart} disabled={!patientId || isProcessing} />\n      <section className={classes.rows}>\n        <div className={classes.row}>Filename - Status</div>\n        {fileStatusList.map((f) => {\n          return (\n            <Box\n              key={f.filename}\n              className={`${classes.row} bg`}\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <span>\n                {f.filename} - {f.status}{' '}\n              </span>\n              <span>\n                {f.status === 'uploading' && <CircularProgressWithLabel value={progress} />}\n              </span>\n            </Box>\n          )\n        })}\n      </section>\n      {dialogMsg && (\n        <Dialog open={true} onClose={() => setDialogMsg(null)}>\n          <DialogTitle className={hasError ? classes.dialogError : ''}>\n            {' '}\n            {hasError ? 'Oops!' : 'Congratulation!'}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">{dialogMsg}</DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setDialogMsg(null)} color=\"primary\">\n              OK\n            </Button>\n          </DialogActions>\n        </Dialog>\n      )}\n    </Box>\n  )\n}\n"],"sourceRoot":""}